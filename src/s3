package com.example.documentum;

import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

@Service
public class DocumentumService {

    @Autowired
    private SessionFactory sessionFactory;

    @Autowired
    private QueryLoader queryLoader;

    /**
     * Inserts rows into Documentum using batched DQL statements.
     * 
     * @param rows      List of rows to insert.
     * @param queryName Query template name for the insert.
     */
    public void insertRowsInBatches(List<?> rows, String queryName) {
        String insertQueryTemplate = queryLoader.loadQuery(queryName);
        int batchSize = 5000;

        try (IDfSession session = sessionFactory.getSession()) {
            session.beginTransaction();

            List<String> dqlBatch = new ArrayList<>();
            for (int i = 0; i < rows.size(); i++) {
                dqlBatch.add(formatValues(rows.get(i)));

                if ((i + 1) % batchSize == 0 || i == rows.size() - 1) {
                    executeBatchInsert(session, insertQueryTemplate, dqlBatch);
                    dqlBatch.clear(); // Clear batch after execution
                }
            }

            session.commitTransaction();
        } catch (DfException | IllegalAccessException e) {
            throw new RuntimeException("Error inserting rows into Documentum", e);
        }
    }

    /**
     * Formats a row as a string of values for DQL.
     */
    private String formatValues(Object row) throws IllegalAccessException {
        StringBuilder valuesBuilder = new StringBuilder("(");
        Field[] fields = row.getClass().getDeclaredFields();

        for (int i = 0; i < fields.length; i++) {
            fields[i].setAccessible(true);
            Object value = fields[i].get(row);
            valuesBuilder.append(value == null ? "NULL" : "'" + value.toString().replace("'", "''") + "'");

            if (i < fields.length - 1) {
                valuesBuilder.append(", ");
            }
        }

        valuesBuilder.append(")");
        return valuesBuilder.toString();
    }

    /**
     * Executes a batch insert as a single DQL query.
     */
    private void executeBatchInsert(IDfSession session, String queryTemplate, List<String> dqlBatch) throws DfException {
        StringBuilder batchQuery = new StringBuilder(queryTemplate);
        batchQuery.append(String.join(", ", dqlBatch));
        executeDql(session, batchQuery.toString());
    }

    /**
     * Executes a single DQL query.
     */
    private void executeDql(IDfSession session, String dql) throws DfException {
        session.executeQuery(dql, IDfSession.DF_EXEC_QUERY);
    }
}
