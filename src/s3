package com.example.documentum;

import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

@Service
public class DocumentumService {

    @Autowired
    private SessionFactory sessionFactory;

    @Autowired
    private QueryLoader queryLoader;

    public void insertBatchRows(List<?> rows, String queryName) {
        String insertQueryTemplate = queryLoader.loadQuery(queryName);

        try (IDfSession session = sessionFactory.getSession()) {
            session.beginTransaction();

            List<String> dqlStatements = buildBatchInsertDQL(rows, insertQueryTemplate);
            for (String dql : dqlStatements) {
                executeDql(session, dql);
            }

            session.commitTransaction();
        } catch (DfException | IllegalAccessException e) {
            throw new RuntimeException("Error inserting into Documentum", e);
        }
    }

    private List<String> buildBatchInsertDQL(List<?> rows, String queryTemplate) throws IllegalAccessException {
        List<String> dqlStatements = new ArrayList<>();
        StringBuilder dqlBatch = new StringBuilder();
        int count = 0;

        for (Object row : rows) {
            String values = formatValues(row);
            String dql = queryTemplate.replace(":values", values);

            if (count > 0) {
                dqlBatch.append(" UNION ALL ");
            }
            dqlBatch.append(dql);
            count++;

            if (count == 1000) {
                dqlStatements.add(dqlBatch.toString());
                dqlBatch = new StringBuilder();
                count = 0;
            }
        }

        if (count > 0) {
            dqlStatements.add(dqlBatch.toString());
        }

        return dqlStatements;
    }

    private String formatValues(Object row) throws IllegalAccessException {
        StringBuilder valuesBuilder = new StringBuilder("(");
        Field[] fields = row.getClass().getDeclaredFields();

        for (int i = 0; i < fields.length; i++) {
            fields[i].setAccessible(true);
            Object value = fields[i].get(row);
            valuesBuilder.append(value == null ? "NULL" : "'" + value.toString().replace("'", "''") + "'");

            if (i < fields.length - 1) {
                valuesBuilder.append(", ");
            }
        }

        valuesBuilder.append(")");
        return valuesBuilder.toString();
    }

    private void executeDql(IDfSession session, String dql) throws DfException {
        session.executeQuery(dql, IDfSession.DF_EXEC_QUERY);
    }

    public void deletePreviousDayRecords(String deleteQueryName) {
        String deleteQuery = queryLoader.loadQuery(deleteQueryName);

        try (IDfSession session = sessionFactory.getSession()) {
            session.beginTransaction();

            while (true) {
                int rowsAffected = executeDqlWithCount(session, deleteQuery);
                if (rowsAffected == 0) {
                    break;
                }
            }

            session.commitTransaction();
        } catch (DfException e) {
            throw new RuntimeException("Error deleting previous day's records", e);
        }
    }

    private int executeDqlWithCount(IDfSession session, String dql) throws DfException {
        return session.executeQuery(dql, IDfSession.DF_EXEC_QUERY);
    }
}

package com.example.documentum;

import org.springframework.stereotype.Component;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;

@Component
public class QueryLoader {

    /**
     * Loads a query from a file in the resources folder.
     *
     * @param queryName the name of the query file (e.g., "insert_query.sql")
     * @return the content of the query file as a string
     */
    public String loadQuery(String queryName) {
        try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream("queries/" + queryName);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {

            if (inputStream == null) {
                throw new IllegalArgumentException("Query file not found: " + queryName);
            }

            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        } catch (Exception e) {
            throw new RuntimeException("Error loading query: " + queryName, e);
        }
    }
}

INSERT INTO users (emp_id, org_name, payment_id, manager_id, created) VALUES :values
