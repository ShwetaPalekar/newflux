import { Upload } from '@aws-sdk/lib-storage';
import { S3Client } from '@aws-sdk/client-s3';
import { pipeline } from 'stream/promises';
import * as unzipper from 'unzipper';
import path from 'path';
import pLimit from 'p-limit';

// Constants (replace these with your app's constants)
const APP = {
  UNZIPPER_TYPES: { FILE: 'File' },
  EXTENSION: { O: '.o', I: '.i', AFP: '.afp' },
  S3_FOLDER: { INPROCESS: 'inprocess' },
  ERROR_TYPE: { UNZIP_UPLOAD: 'UNZIP_UPLOAD' }
};

const s3 = new S3Client({ region: 'your-region' });

export async function unzipAndUploadFilesToS3(
  Bucket: string,
  s3ObjectStream: NodeJS.ReadableStream,
  batchName: string
): Promise<string[]> {
  const fileList: string[] = [];
  const limit = pLimit(10); // Limit concurrency to 10 uploads at once
  const uploadTasks: Promise<any>[] = [];

  const zipStream = s3ObjectStream.pipe(unzipper.Parse({ forceStream: true }));

  for await (const fileEntry of zipStream) {
    if (fileEntry.type !== APP.UNZIPPER_TYPES.FILE) {
      fileEntry.autodrain();
      continue;
    }

    let nameOfFile = path.basename(fileEntry.path);

    // Normalize and lower-case the filename
    nameOfFile = nameOfFile.replace(/\\/g, '/').split('/').pop() ?? '';
    nameOfFile = nameOfFile.toLowerCase();

    // Optional extension logic
    if (!nameOfFile.endsWith(APP.EXTENSION.O) &&
        !nameOfFile.endsWith(APP.EXTENSION.I) &&
        !nameOfFile.endsWith(APP.EXTENSION.AFP)) {
      nameOfFile = nameOfFile.slice(0, -2) + APP.EXTENSION.AFP;
    }

    const uploadParams = {
      Bucket,
      Key: `${batchName}/${APP.S3_FOLDER.INPROCESS}/${nameOfFile}`,
      Body: fileEntry
    };

    // Push throttled upload promise
    const uploadPromise = limit(async () => {
      await new Upload({ client: s3, params: uploadParams }).done();
      fileList.push(`${batchName}/${APP.S3_FOLDER.INPROCESS}/${nameOfFile}`);
    });

    uploadTasks.push(uploadPromise());
  }

  // Await all uploads
  const results = await Promise.allSettled(uploadTasks);

  // Throw if any failed
  results.forEach((result) => {
    if (result.status === 'rejected') {
      throw new Error(
        `${APP.ERROR_TYPE.UNZIP_UPLOAD}: ${result.reason?.message ?? 'Unknown error'}`
      );
    }
  });

  return fileList;
}
