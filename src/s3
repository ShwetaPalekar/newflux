import { S3Client, HeadObjectCommand, GetObjectCommand, PutObjectCommand } from "@aws-sdk/client-s3";
import yauzl from "yauzl";
import { PassThrough } from "stream";

const s3 = new S3Client({});

export const handler = async (event) => {
  const { bucket, zipKey, targetFile } = event;

  console.log(`Extracting "${targetFile}" from "${zipKey}" in "${bucket}"`);

  // Step 1: Get ZIP size for yauzl
  const head = await s3.send(new HeadObjectCommand({
    Bucket: bucket,
    Key: zipKey
  }));
  const contentLength = head.ContentLength;

  return new Promise((resolve, reject) => {
    yauzl.fromRandomAccessReader(
      new S3RandomAccessReader(bucket, zipKey),
      contentLength,
      { lazyEntries: true },
      (err, zipfile) => {
        if (err) return reject(err);

        let found = false;

        zipfile.readEntry();

        zipfile.on("entry", (entry) => {
          if (entry.fileName === targetFile) {
            found = true;
            console.log(`Found target file: ${entry.fileName}`);

            zipfile.openReadStream(entry, async (err, readStream) => {
              if (err) return reject(err);

              try {
                // Upload directly to S3 (no /tmp usage)
                await s3.send(new PutObjectCommand({
                  Bucket: bucket,
                  Key: `extracted/${targetFile}`,
                  Body: readStream
                }));

                console.log(`Uploaded to s3://${bucket}/extracted/${targetFile}`);
                zipfile.close();
                resolve({ status: "success", file: targetFile });
              } catch (uploadErr) {
                reject(uploadErr);
              }
            });
          } else {
            // Skip and read next entry
            zipfile.readEntry();
          }
        });

        zipfile.on("end", () => {
          if (!found) reject(new Error(`"${targetFile}" not found in ZIP`));
        });

        zipfile.on("error", reject);
      }
    );
  });
};

// Random access reader for yauzl (S3 streaming, SDK v3)
class S3RandomAccessReader extends yauzl.RandomAccessReader {
  constructor(bucket, key) {
    super();
    this.bucket = bucket;
    this.key = key;
  }

  _readStreamForRange(start, end) {
    const command = new GetObjectCommand({
      Bucket: this.bucket,
      Key: this.key,
      Range: `bytes=${start}-${end - 1}`
    });
    return s3.send(command).then(resp => resp.Body);
  }

  _destroy(cb) { cb(); }
}
