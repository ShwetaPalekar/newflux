package com.example.demo.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class S3Service {

    private final S3Client s3Client;
    private final String bucketName;

    public S3Service(@Value("${aws.accessKeyId}") String accessKeyId,
                     @Value("${aws.secretAccessKey}") String secretAccessKey,
                     @Value("${aws.region}") String region,
                     @Value("${aws.bucketName}") String bucketName) {
        this.s3Client = S3Client.builder()
                .region(Region.of(region))
                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKeyId, secretAccessKey)))
                .build();
        this.bucketName = bucketName;
    }

    public void moveFile(String sourceKey, String destinationKey) {
        try {
            // Copy the file to the new location
            CopyObjectRequest copyObjectRequest = CopyObjectRequest.builder()
                    .sourceBucket(bucketName)
                    .sourceKey(sourceKey)
                    .destinationBucket(bucketName)
                    .destinationKey(destinationKey)
                    .build();
            s3Client.copyObject(copyObjectRequest);

            // Delete the original file
            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()
                    .bucket(bucketName)
                    .key(sourceKey)
                    .build();
            s3Client.deleteObject(deleteObjectRequest);
        } catch (S3Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error moving file from " + sourceKey + " to " + destinationKey, e);
        }
    }

    public void deleteFolder(String folderKey) {
        try {
            List<S3Object> objectsToDelete = new ArrayList<>();
            ListObjectsV2Request listObjectsV2Request = ListObjectsV2Request.builder()
                    .bucket(bucketName)
                    .prefix(folderKey)
                    .build();
            ListObjectsV2Response listObjectsV2Response;

            for (listObjectsV2Response = s3Client.listObjectsV2(listObjectsV2Request);
                 listObjectsV2Response.isTruncated();
                 listObjectsV2Response = s3Client.listObjectsV2(listObjectsV2Request.toBuilder()
                         .continuationToken(listObjectsV2Response.nextContinuationToken())
                         .build())) {

                objectsToDelete.addAll(listObjectsV2Response.contents());
            }

            // Add remaining objects
            objectsToDelete.addAll(listObjectsV2Response.contents());

            if (!objectsToDelete.isEmpty()) {
                List<ObjectIdentifier> objectIdentifiers = objectsToDelete.stream()
                        .map(S3Object::key)
                        .map(key -> ObjectIdentifier.builder().key(key).build())
                        .collect(Collectors.toList());

                DeleteObjectsRequest deleteObjectsRequest = DeleteObjectsRequest.builder()
                        .bucket(bucketName)
                        .delete(Delete.builder().objects(objectIdentifiers).build())
                        .build();
                s3Client.deleteObjects(deleteObjectsRequest);
            }

        } catch (S3Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error deleting folder " + folderKey, e);
        }
    }
}
