import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.S3Object;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSessionManager;
import com.documentum.fc.client.IDfSysObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.InputStream;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class DocumentumServiceTest {

    @Mock
    private AmazonS3 amazonS3;

    @Mock
    private IDfSessionManager sessionManager;

    @Mock
    private IDfSession session;

    @Mock
    private S3Object s3Object;

    @Mock
    private InputStream inputStream;

    @Mock
    private IDfSysObject dfSysObject;

    @InjectMocks
    private DocumentumService documentumService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // Test for streamFilesToDocumentum: Success scenario
    @Test
    public void testStreamFilesToDocumentum_Success() throws Exception {
        List<String> keys = Arrays.asList("file1.pdf", "file2.pdf", "file3.pdf");

        when(sessionManager.getSession(anyString())).thenReturn(session);
        when(amazonS3.getObject(anyString(), anyString())).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(inputStream);
        when(session.newObject(anyString())).thenReturn(dfSysObject);

        Result result = documentumService.streamFilesToDocumentum(keys, "bucketName");

        verify(session, times(1)).beginTransaction();
        verify(dfSysObject, times(3)).save();
        verify(session, times(1)).commitTransaction();
        assertEquals("Some data", result.getData());
    }

    // Test for streamFilesToDocumentum: Partial failure scenario
    @Test
    public void testStreamFilesToDocumentum_PartialFailure() throws Exception {
        List<String> keys = Arrays.asList("file1.pdf", "file2.pdf", "file3.pdf");

        when(sessionManager.getSession(anyString())).thenReturn(session);
        when(amazonS3.getObject(anyString(), eq("file2.pdf"))).thenThrow(new RuntimeException("File not found"));
        when(amazonS3.getObject(anyString(), anyString())).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(inputStream);
        when(session.newObject(anyString())).thenReturn(dfSysObject);

        Result result = documentumService.streamFilesToDocumentum(keys, "bucketName");

        verify(session, never()).commitTransaction();
        verify(session, never()).abortTransaction();
        assertEquals(1, result.getAnotherClass().size()); // One failure should be recorded
    }

    // Test for streamFilesToDocumentum: Transaction failure scenario
    @Test
    public void testStreamFilesToDocumentum_TransactionFailure() throws Exception {
        List<String> keys = Arrays.asList("file1.pdf", "file2.pdf", "file3.pdf");

        when(sessionManager.getSession(anyString())).thenReturn(session);
        when(amazonS3.getObject(anyString(), anyString())).thenReturn(s3Object);
        when(s3Object.getObjectContent()).thenReturn(inputStream);
        when(session.newObject(anyString())).thenReturn(dfSysObject);
        doThrow(new RuntimeException("Save failed")).when(dfSysObject).save();

        Result result = documentumService.streamFilesToDocumentum(keys, "bucketName");

        verify(session, times(1)).beginTransaction();
        verify(session, times(1)).abortTransaction();
        verify(session, never()).commitTransaction();
        assertEquals(0, result.getAnotherClass().size()); // No successful operations
    }

    // Test for prepareDocument: Success scenario
    @Test
    public void testPrepareDocument_Success() throws Exception {
        when(sessionManager.getSession(anyString())).thenReturn(session);
        when(session.newObject(anyString())).thenReturn(dfSysObject);

        InputStream inputStream = mock(InputStream.class);

        IDfSysObject result = documentumService.prepareDocument(inputStream, "file1.pdf");

        verify(dfSysObject, times(1)).setObjectName("file1.pdf");
        verify(dfSysObject, times(1)).setContentType("application/pdf");
        verify(dfSysObject, times(1)).setContentEx(inputStream, "pdf");
        assertNotNull(result);
    }

    // Test for prepareDocument: Failure scenario
    @Test
    public void testPrepareDocument_Failure() throws Exception {
        when(sessionManager.getSession(anyString())).thenReturn(session);
        when(session.newObject(anyString())).thenReturn(dfSysObject);
        doThrow(new RuntimeException("Document creation failed")).when(dfSysObject).setContentEx(any(), anyString());

        InputStream inputStream = mock(InputStream.class);

        Exception exception = assertThrows(Exception.class, () -> {
            documentumService.prepareDocument(inputStream, "file1.pdf");
        });

        assertEquals("Document creation failed", exception.getMessage());
    }
}
