import { S3Client } from "@aws-sdk/client-s3";
import { Upload } from "@aws-sdk/lib-storage";
import unzipper from "unzipper"; // or yauzl, etc.
import { Readable } from "stream";

const s3 = new S3Client({});

async function streamZipEntriesToS3(zipStream, bucketName, prefix = '') {
  return new Promise((resolve, reject) => {
    const uploads = [];

    zipStream
      .pipe(unzipper.Parse())
      .on("entry", async (entry) => {
        const { path, type } = entry;

        if (type === "File") {
          const upload = new Upload({
            client: s3,
            params: {
              Bucket: bucketName,
              Key: `${prefix}${path}`,
              Body: entry, // <-- directly stream to S3
            },
            queueSize: 4,
            leavePartsOnError: false,
          });

          upload.on("httpUploadProgress", (progress) => {
            console.log(`Uploading ${path}:`, progress);
          });

          uploads.push(upload.done());
        } else {
          entry.autodrain();
        }
      })
      .on("error", reject)
      .on("close", async () => {
        try {
          await Promise.all(uploads);
          resolve();
        } catch (err) {
          reject(err);
        }
      });
  });
}
```

### ✔️ How to use it:
```js
import { S3Client, GetObjectCommand } from "@aws-sdk/client-s3";

const zipFileStream = await s3.send(new GetObjectCommand({
  Bucket: "source-bucket",
  Key: "path/to/zipfile.zip"
})).then(res => res.Body); // res.Body is a readable stream

await streamZipEntriesToS3(zipFileStream, "destination-bucket", "unzipped/");
```

---
