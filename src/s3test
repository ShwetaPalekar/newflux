package com.example.demo.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class S3ServiceTest {

    @Mock
    private S3Client s3Client;

    @InjectMocks
    private S3Service s3Service;

    private final String bucketName = "test-bucket";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        s3Service = new S3Service("test-access-key", "test-secret-key", "us-east-1", bucketName);
    }

    @Test
    void testMoveFile() {
        String sourceKey = "source/file.txt";
        String destinationKey = "destination/file.txt";

        doNothing().when(s3Client).copyObject(any(CopyObjectRequest.class));
        doNothing().when(s3Client).deleteObject(any(DeleteObjectRequest.class));

        s3Service.moveFile(sourceKey, destinationKey);

        verify(s3Client, times(1)).copyObject(any(CopyObjectRequest.class));
        verify(s3Client, times(1)).deleteObject(any(DeleteObjectRequest.class));
    }

    @Test
    void testMoveFileThrowsException() {
        String sourceKey = "source/file.txt";
        String destinationKey = "destination/file.txt";

        doThrow(S3Exception.builder().message("Error").build()).when(s3Client).copyObject(any(CopyObjectRequest.class));

        try {
            s3Service.moveFile(sourceKey, destinationKey);
        } catch (RuntimeException e) {
            assert e.getMessage().contains("Error moving file");
        }

        verify(s3Client, times(1)).copyObject(any(CopyObjectRequest.class));
        verify(s3Client, never()).deleteObject(any(DeleteObjectRequest.class));
    }

    @Test
    void testDeleteFolder() {
        String folderKey = "folder/";

        ListObjectsV2Response listObjectsV2Response = ListObjectsV2Response.builder()
                .contents(Arrays.asList(
                        S3Object.builder().key("folder/file1.txt").build(),
                        S3Object.builder().key("folder/file2.txt").build()
                ))
                .isTruncated(false)
                .build();

        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class))).thenReturn(listObjectsV2Response);
        doNothing().when(s3Client).deleteObjects(any(DeleteObjectsRequest.class));

        s3Service.deleteFolder(folderKey);

        verify(s3Client, times(1)).listObjectsV2(any(ListObjectsV2Request.class));
        verify(s3Client, times(1)).deleteObjects(any(DeleteObjectsRequest.class));
    }

    @Test
    void testDeleteFolderMultipleBatches() {
        String folderKey = "folder/";

        ListObjectsV2Response listObjectsV2ResponseFirstBatch = ListObjectsV2Response.builder()
                .contents(Arrays.asList(
                        S3Object.builder().key("folder/file1.txt").build(),
                        S3Object.builder().key("folder/file2.txt").build()
                ))
                .isTruncated(true)
                .nextContinuationToken("token")
                .build();

        ListObjectsV2Response listObjectsV2ResponseSecondBatch = ListObjectsV2Response.builder()
                .contents(Arrays.asList(
                        S3Object.builder().key("folder/file3.txt").build(),
                        S3Object.builder().key("folder/file4.txt").build()
                ))
                .isTruncated(false)
                .build();

        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenReturn(listObjectsV2ResponseFirstBatch)
                .thenReturn(listObjectsV2ResponseSecondBatch);

        doNothing().when(s3Client).deleteObjects(any(DeleteObjectsRequest.class));

        s3Service.deleteFolder(folderKey);

        verify(s3Client, times(2)).listObjectsV2(any(ListObjectsV2Request.class));
        verify(s3Client, times(2)).deleteObjects(any(DeleteObjectsRequest.class));
    }

    @Test
    void testDeleteFolderThrowsException() {
        String folderKey = "folder/";

        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenThrow(S3Exception.builder().message("Error").build());

        try {
            s3Service.deleteFolder(folderKey);
        } catch (RuntimeException e) {
            assert e.getMessage().contains("Error deleting folder");
        }

        verify(s3Client, times(1)).listObjectsV2(any(ListObjectsV2Request.class));
        verify(s3Client, never()).deleteObjects(any(DeleteObjectsRequest.class));
    }
}
